#!/bin/bash
#
# init.d script with LSB support.
#
#
### BEGIN INIT INFO
# Provides:          hereweare
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Stop/start hereweare
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/local/bin/node
DESC="sensei application for reporting (frontend)"

# Default defaults.  Can be overridden by the /etc/default/$NAME
NAME=hereweared-frontend
#CONF=
RUNDIR=/home/federico/Documents/ehour/projects/hereweare-frontend/build/local
PIDFILE=/var/run/hereweare/$NAME.pid
LOGFILE=/var/log/hereweare/$NAME.log
ENABLE_HEREWEARE=yes

# Include hereweare defaults if available
if [ -f /etc/default/$NAME ] ; then
	. /etc/default/$NAME
fi

if test ! -x $DAEMON; then
    echo "Could not find $DAEMON"
    exit 0
fi

if test "x$ENABLE_HEREWEARE" != "xyes"; then
    exit 0
fi

. /lib/lsb/init-functions

STARTTIME=1
DIETIME=10                   # Time to wait for the server to die, in seconds
                            # If this value is set too low you might not
                            # let some servers to die gracefully and
                            # 'restart' will not work

DAEMONUSER=${DAEMONUSER:-federico}
DAEMON_OPTS=${DAEMON_OPTS:-"$RUNDIR"}

set -e

# Read in our configuration
if [ -z "${BOOTUP:-}" ]; then
  if [ -f /etc/sysconfig/init ]; then
      . /etc/sysconfig/init
  else
    # This all seem confusing? Look in /etc/sysconfig/init,
    # or in /usr/share/doc/initscripts-*/sysconfig.txt
    BOOTUP=color
    RES_COL=60
    MOVE_TO_COL="echo -en \\033[${RES_COL}G"
    SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    SETCOLOR_FAILURE="echo -en \\033[1;31m"
    SETCOLOR_WARNING="echo -en \\033[1;33m"
    SETCOLOR_NORMAL="echo -en \\033[0;39m"
    LOGLEVEL=1
  fi
fi

success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1

    #log_daemon_msg "`cat /proc/$pid/cmdline`"
    #log_daemon_msg "`cat /proc/$pid/cmdline | tr "\000" "\n"`"
    #log_daemon_msg "`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1`"
    #log_daemon_msg "`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`"
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected server
    log_daemon_msg "test running: `[ "$cmd" != "$name" ]`"
    [ "$cmd" != "$name" ] &&  return 1
    log_daemon_msg "end running_pid"
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)
    log_daemon_msg "Check running"
    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    log_daemon_msg "pid: " "$pid"
    # log_daemon_msg "running_pid: " "$(running_pid $pid $DAEMON)"
    running_pid $pid $DAEMON || return 1
    log_daemon_msg "after running_pid"
    return 0
}

start_server() {
    test -e "$RUNDIR" || install -m 755 -o $DAEMONUSER -g $DAEMONUSER -d "$RUNDIR"
    # Start the process using the wrapper
    #        start-stop-daemon --background --start --quiet --pidfile $PIDFILE \
    #                    --make-pidfile --chuid $DAEMONUSER \
    #                    --exec $DAEMON -- $DAEMON_OPTS

    # make sure it doesn't core dump anywhere unless requested
    corelimit="ulimit -S -c ${DAEMON_COREFILE_LIMIT:-0}"

    su -s /bin/bash -c "$corelimit >/dev/null 2>&1 ; $DAEMON $DAEMON_OPTS >> $LOGFILE 2>&1 & echo \$! > $PIDFILE" $DAEMONUSER

    errcode=$?
    return $errcode
}

stop_server() {
    echo -n $"Stopping hereweared: "
  	echo "calling killproc"
  	echo "pidfile: $PIDFILE; process: $DAEMON"
  	mongo_killproc "$PIDFILE" $DAEMON
  	errcode=$?
  	return $errcode
}

# Check if any of $pid (could be plural) are running
checkpid() {
    local i
    for i in $* ; do
      [ -d "/proc/$i" ] && return 0
    done
    return 1
}

# Send TERM signal to process and wait up to 300 seconds for process to go away.
# If process is still alive after 300 seconds, send KILL signal.
# Built-in killproc() (found in /etc/init.d/functions) is on certain versions of Linux
# where it sleeps for the full $delay seconds if process does not respond fast enough to
# the initial TERM signal.
mongo_killproc() {
  local pid_file=$1
  local procname=$2
  local -i delay=300
  local -i duration=10
  local pid=`pidofproc -p "${pid_file}" ${procname}`

  echo "pid: $pid"

  kill -TERM $pid >/dev/null 2>&1
  #usleep 100000
	sleep 0.1
  local -i x=0
  while [ $x -le $delay ] && checkpid $pid; do
    sleep $duration
    x=$(( $x + $duration))
  done

  kill -KILL $pid >/dev/null 2>&1
  #usleep 100000
	sleep 0.1

  checkpid $pid # returns 0 only if the process exists
  local RC=$?
  [ "$RC" -eq 0 ] && failure "${procname} shutdown" || rm -f "${pid_file}"; success "${procname} shutdown"
  RC=$((! $RC)) # invert return code so we return 0 when process is dead.
  return $RC
}

force_stop() {
# Force the process to die killing it manually
	[ ! -e "$PIDFILE" ] && return
	if running ; then
		kill -15 $pid
	# Is it really dead?
		sleep "$DIETIME"s
		if running ; then
			kill -9 $pid
			sleep "$DIETIME"s
			if running ; then
				echo "Cannot kill $NAME (pid=$pid)!"
				exit 1
			fi
		fi
	fi
	rm -f $PIDFILE
}

my_log_progress_msg () {
    if [ -z "${1:-}" ]; then
        return 1
    fi
    echo -n " $@" || true
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
        # Check if it's running first
        if running ;  then
	    log_daemon_msg "apparently running"
            my_log_progress_msg "apparently already running"
            log_end_msg 0
            exit 0
        fi
        if start_server ; then
            # NOTE: Some servers might die some time after they start,
            # this code will detect this issue if STARTTIME is set
            # to a reasonable value
            [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time
            if  running ;  then
                # It's ok, the server started and is running
                log_end_msg 0
            else
                # It is not running after we did start
                log_end_msg 1
            fi
        else
            # Either we could not start it
            log_end_msg 1
        fi
	;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        if running ; then
            # Only stop the server if we see it running
			errcode=0
            stop_server || errcode=$?
            log_end_msg $errcode
        else
            # If it's not running don't do anything
            log_progress_msg "apparently not running"
            log_end_msg 0
            exit 0
        fi
        ;;
  force-stop)
        # First try to stop gracefully the program
        $0 stop
        if running; then
            # If it's still running try to kill it more forcefully
            log_daemon_msg "Stopping (force) $DESC" "$NAME"
			errcode=0
            force_stop || errcode=$?
            log_end_msg $errcode
        fi
	;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
		errcode=0
        stop_server || errcode=$?
        # Wait some sensible amount, some server need this
        [ -n "$DIETIME" ] && sleep $DIETIME
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        running || errcode=$?
        log_end_msg $errcode
	;;
  status)

        log_daemon_msg "Checking status of $DESC" "$NAME"
        if running ;  then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "apparently not running"
            log_end_msg 1
            exit 1
        fi
        ;;
  # MongoDB can't reload its configuration.
  reload)
        log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "cannot re-read the config file (use restart)."
        ;;

  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
